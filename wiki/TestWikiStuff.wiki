{{{
private static final Index INDEX = getIndex();

private static Index getIndex() {
  IndexSpec indexSpec = IndexSpec.newBuilder().setName("user_index").setConsistency(Consistency.PER_DOCUMENT)
      .build();
  return SearchServiceFactory.getSearchService().getIndex(indexSpec);
}

public static void addToSearchIndex(User p) {
  Document.Builder docBuilder = Document.newBuilder()
      .addField(Field.newBuilder().setName("id").setText(Long.toString(p.getId())))
      .addField(Field.newBuilder().setName("nameFirst").setText(p.getNameFirst() != null ? p.getNameFirst() : ""))
      .addField(Field.newBuilder().setName("nameLast").setText(p.getNameLast() != null ? p.getNameLast() : ""));
  docBuilder.setId(Long.toString(p.getId()));
  Document doc = docBuilder.build();
  INDEX.add(doc);
}


 @ApiMethod(
    httpMethod = "POST",
    name = "user.insert",
    path = "user/insert")
public User insertUser(User user, com.google.appengine.api.users.User guser) throws Exception {
  if (guser == null) {
    throw new UnauthorizedException(CustomErrors.MUST_LOG_IN.toString());
  }
  
  PersistenceManager mgr = getPersistenceManager();
  try {
    mgr.makePersistent(user);
    addToSearchIndex(user);
  } finally {
    mgr.close();
  }
  return user;
}


@ApiMethod(
    httpMethod = "GET", 
    name = "user.search",
    path = "user/search/{queryString}")
public List<User> search(@Named("queryString") String queryString, com.google.appengine.api.users.User guser) 
    throws Exception {
  if (guser == null) {
    throw new UnauthorizedException(CustomErrors.MUST_LOG_IN.toString());
  }
  
  List<User> returnList = new ArrayList<User>();
  Results<ScoredDocument> searchResults = INDEX.search(queryString);

  for (ScoredDocument scoredDoc : searchResults) {
    Field fieldId = scoredDoc.getOnlyField("id");
    if (fieldId == null || fieldId.getText() == null)
      continue;

    long userId = Long.parseLong(fieldId.getText());
    if (userId != -1) {
      User p = getUser(userId, guser);
      returnList.add(p);
    }
  }
  return returnList;
}


}}}